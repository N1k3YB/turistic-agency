generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator prisma_seed {
  provider   = "prisma-client-js"
  seedScript = "npm run prisma:seed"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           UserRole     @default(USER)
  phone          String?
  address        String?
  createdAt      DateTime     @default(now())
  reviews        Review[]
  favorites      Favorite[]
  orders         Order[]
  tickets        Ticket[]
}

model Tour {
  title            String
  slug             String       @unique
  price            Decimal
  currency         String
  imageUrl         String
  shortDescription String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  id               Int          @id @default(autoincrement())
  destinationId    Int
  exclusions       String
  fullDescription  String
  imageUrls        String[]
  inclusions       String
  itinerary        String
  duration         Int          @default(7)
  groupSize        Int          @default(10)
  availableSeats   Int          @default(10)
  nextTourDate     DateTime?
  destination      Destination  @relation(fields: [destinationId], references: [id])
  reviews          Review[]
  favorites        Favorite[]
  orders           Order[]
}

model Destination {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tours       Tour[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tourId     Int
  userId     String
  tour       Tour     @relation(fields: [tourId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  tourId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([userId, tourId])
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       String
  tourId       Int
  quantity     Int
  totalPrice   Decimal
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  contactPhone String?
  contactEmail String
  user         User        @relation(fields: [userId], references: [id])
  tour         Tour        @relation(fields: [tourId], references: [id])
}

model Ticket {
  id          Int           @id @default(autoincrement())
  userId      String
  subject     String
  message     String
  status      TicketStatus  @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   TicketResponse[]
}

model TicketResponse {
  id          Int         @id @default(autoincrement())
  ticketId    Int
  message     String
  isFromStaff Boolean     @default(false)
  createdAt   DateTime    @default(now())
  ticket      Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  RESOLVED
}
