generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator prisma_seed {
  provider   = "prisma-client-js"
  seedScript = "npm run prisma:seed"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           UserRole  @default(USER)
  accounts       Account[]
  sessions       Session[]
  reviews        Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tour {
  title            String
  slug             String      @unique
  price            Decimal
  currency         String
  imageUrl         String
  shortDescription String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  id               Int         @id @default(autoincrement())
  destinationId    Int
  exclusions       String
  fullDescription  String
  imageUrls        String[]
  inclusions       String
  itinerary        String
  destination      Destination @relation(fields: [destinationId], references: [id])
  reviews          Review[]
}

model Destination {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tours       Tour[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tourId     Int
  userId     String
  tour       Tour     @relation(fields: [tourId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}
